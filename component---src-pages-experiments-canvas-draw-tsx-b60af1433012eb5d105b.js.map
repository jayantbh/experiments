{"version":3,"sources":["webpack:///./src/components/CanvasDraw/index.tsx","webpack:///./src/pages/experiments/canvas-draw.tsx"],"names":["frame","lastCoords","colors","getEventXY","ev","rect","Object","hasOwnProperty","e","x","clientX","left","y","clientY","top","touches","Infinity","ctxPathFrom","ctx","beginPath","lineWidth","moveTo","ctxPathTo","lineTo","stroke","resize","canvas","displayWidth","clientWidth","displayHeight","clientHeight","width","height","CanvasDraw","useState","doDraw","setDoDraw","colorIndex","setColorIndex","ref","useRef","onMouseMove","useCallback","current","cancelAnimationFrame","getBoundingClientRect","requestAnimationFrame","getContext","strokeStyle","onTrigger","hasTrigger","buttons","onTouchStart","onTouchEnd","onPickColor","i","className","css","container","onMouseUp","onMouseDown","onTouchMove","map","c","key","cls","color","style","backgroundColor","component","frontmatter","title","description","categories"],"mappings":"yJAMIA,EAAuB,KACvBC,EAA8C,KAE5CC,EAAS,CACb,qBACA,qBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,UACA,UACA,OACA,QAyFIC,EAAa,SACjBC,EACAC,GAEA,GAAIC,OAAOF,GAAIG,eAAe,YAAcD,OAAOF,GAAIG,eAAe,WAAY,CAChF,IAAMC,EAAIJ,EACV,MAAO,CACLK,EAAGD,EAAEE,QAAUL,EAAKM,KACpBC,EAAGJ,EAAEK,QAAUR,EAAKS,KAEjB,GAAIR,OAAOF,GAAIG,eAAe,WAAY,CAC/C,IAAMC,EAAIJ,EACV,MAAO,CACLK,EAAGD,EAAEO,QAAQ,GAAGL,QAAUL,EAAKM,KAC/BC,EAAGJ,EAAEO,QAAQ,GAAGF,QAAUR,EAAKS,KAInC,MAAO,CAAEL,GAAIO,IAAUJ,GAAII,MAGvBC,EAAc,SAACC,EAA+BT,EAAWG,GAC7DM,EAAIC,YACJD,EAAIE,UApIO,EAqIXF,EAAIG,OAAOZ,EAAGG,IAGVU,EAAY,SAACJ,EAA+BT,EAAWG,GAC3DM,EAAIK,OAAOd,EAAGG,GACdM,EAAIM,UAGAC,EAAS,SAACC,GACd,IAAMC,EAAeD,EAAOE,YACtBC,EAAgBH,EAAOI,aAEzBJ,EAAOK,QAAUJ,GAAgBD,EAAOM,SAAWH,IACrDH,EAAOK,MAAQJ,EACfD,EAAOM,OAASH,IAILI,EAhII,WAAM,MACKC,oBAAS,GAA9BC,EADgB,KACRC,EADQ,OAEaF,mBAAS,GAAtCG,EAFgB,KAEJC,EAFI,KAIjBC,EAAMC,iBAA0B,MAChCC,EAAcC,uBAClB,SAAClC,GAEC,GADK2B,IAAQlC,EAAa,MACrBsC,GAAQA,EAAII,SAAYR,EAA7B,CACA,IAAMT,EAASa,EAAII,QAEf3C,GAAO4C,qBAAqB5C,GAEhC,IAAMK,EAAOqB,EAAOmB,wBAPwE,EAQ3E1C,EAAWK,EAAGH,GAAvBI,EARoF,EAQpFA,EAAGG,EARiF,EAQjFA,EAEXZ,EAAQ8C,uBAAsB,WAC5B,IAAM5B,EAAMQ,EAAOqB,WAAW,MACzB7B,IACLO,EAAOC,GACPR,EAAI8B,YAAc9C,EAAOmC,GACzBpB,EAAYC,EAAKT,EAAGG,GACfX,GAKLqB,EAAUJ,EAAKjB,EAAWQ,EAAGR,EAAWW,GACxCX,EAAa,CAAEQ,IAAGG,MALhBX,EAAa,CAAEQ,IAAGG,YAQxB,CAAC2B,EAAKJ,IAGFc,EAAYP,uBAAY,SAAClC,GAC7B,IAAM0C,EAA2B,IAAd1C,EAAE2C,QACrBf,EAAUc,KACT,IAEGE,EAAeV,uBAAY,SAAClC,GAChCsC,uBAAsB,WACpB7C,EAAa,QAEfmC,GAAU,KACT,IAEGiB,EAAaX,uBAAY,SAAClC,GAC9B4B,GAAU,GACVU,uBAAsB,WACpB7C,EAAa,UAEd,IAEGqD,EAAcZ,uBAClB,SAACa,GAAD,OAAe,WACbjB,EAAciB,MAEhB,IAGF,OACE,yBAAKC,UAAWC,IAAIC,WAClB,4BACEnB,IAAKA,EACLiB,UAAWC,IAAI/B,OACfe,YAAaA,EACbkB,UAAWV,EACXW,YAAaX,EACbG,aAAcA,EACdC,WAAYA,EACZQ,YAAapB,IAEf,yBAAKe,UAAWC,IAAI,kBACjBvD,EAAO4D,KAAI,SAACC,EAAWR,GAAZ,OACV,yBACES,IAAKD,EACLP,UAAWS,IAAIR,IAAIS,MAAOX,IAAMlB,GAAcoB,IAAI,iBAClDE,UAAWL,EAAYC,GACvBY,MAAO,CAAEC,gBAAiBL,WC1GtC,4CACeM,gBAEFC,EAAc,CACzBC,MAAO,cACPC,YAAa,+DACbC,WAAY,CAAC,SAAU,KAAM","file":"component---src-pages-experiments-canvas-draw-tsx-b60af1433012eb5d105b.js","sourcesContent":["import cls from 'classnames';\nimport React, { useCallback, useRef, useState } from 'react';\n\nimport css from './styles.module.scss';\n\nconst SIZE = 3;\nlet frame: number | null = null;\nlet lastCoords: null | { x: number; y: number } = null;\n\nconst colors = [\n  'hsl(205, 67%, 45%)',\n  'hsl(205, 74%, 65%)',\n  'hsl(29, 80%, 44%)',\n  'hsl(48, 95%, 76%)',\n  'hsl(209, 34%, 30%)',\n  'hsl(211, 27%, 70%)',\n  'hsl(185, 81%, 29%)',\n  'hsl(184, 65%, 59%)',\n  'hsl(360, 72%, 38%)',\n  'hsl(360, 77%, 78%)',\n  'hsl(166, 72%, 28%)',\n  'hsl(158, 58%, 62%)',\n  '#F0F0F0',\n  '#A4A4A4',\n  '#000',\n  '#fff',\n];\n\nconst CanvasDraw = () => {\n  const [doDraw, setDoDraw] = useState(false);\n  const [colorIndex, setColorIndex] = useState(0);\n\n  const ref = useRef<HTMLCanvasElement>(null);\n  const onMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement, MouseEvent> | React.TouchEvent<HTMLCanvasElement>) => {\n      if (!doDraw) lastCoords = null;\n      if (!ref || !ref.current || !doDraw) return;\n      const canvas = ref.current;\n\n      if (frame) cancelAnimationFrame(frame);\n\n      const rect = canvas.getBoundingClientRect();\n      const { x, y } = getEventXY(e, rect);\n\n      frame = requestAnimationFrame(() => {\n        const ctx = canvas.getContext('2d');\n        if (!ctx) return;\n        resize(canvas);\n        ctx.strokeStyle = colors[colorIndex];\n        ctxPathFrom(ctx, x, y);\n        if (!lastCoords) {\n          lastCoords = { x, y };\n          return;\n        }\n\n        ctxPathTo(ctx, lastCoords.x, lastCoords.y);\n        lastCoords = { x, y };\n      });\n    },\n    [ref, doDraw]\n  );\n\n  const onTrigger = useCallback((e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const hasTrigger = e.buttons === 1;\n    setDoDraw(hasTrigger);\n  }, []);\n\n  const onTouchStart = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    requestAnimationFrame(() => {\n      lastCoords = null;\n    });\n    setDoDraw(true);\n  }, []);\n\n  const onTouchEnd = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    setDoDraw(false);\n    requestAnimationFrame(() => {\n      lastCoords = null;\n    });\n  }, []);\n\n  const onPickColor = useCallback(\n    (i: number) => () => {\n      setColorIndex(i);\n    },\n    []\n  );\n\n  return (\n    <div className={css.container}>\n      <canvas\n        ref={ref}\n        className={css.canvas}\n        onMouseMove={onMouseMove}\n        onMouseUp={onTrigger}\n        onMouseDown={onTrigger}\n        onTouchStart={onTouchStart}\n        onTouchEnd={onTouchEnd}\n        onTouchMove={onMouseMove}\n      />\n      <div className={css['color-palette']}>\n        {colors.map((c: string, i) => (\n          <div\n            key={c}\n            className={cls(css.color, i === colorIndex && css['active-color'])}\n            onMouseUp={onPickColor(i)}\n            style={{ backgroundColor: c }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getEventXY = (\n  ev: React.MouseEvent<HTMLCanvasElement, MouseEvent> | React.TouchEvent<HTMLCanvasElement>,\n  rect: ClientRect\n) => {\n  if (Object(ev).hasOwnProperty('clientX') && Object(ev).hasOwnProperty('clientY')) {\n    const e = ev as React.MouseEvent<HTMLCanvasElement, MouseEvent>;\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n  } else if (Object(ev).hasOwnProperty('touches')) {\n    const e = ev as React.TouchEvent<HTMLCanvasElement>;\n    return {\n      x: e.touches[0].clientX - rect.left,\n      y: e.touches[0].clientY - rect.top,\n    };\n  }\n\n  return { x: -Infinity, y: -Infinity };\n};\n\nconst ctxPathFrom = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n  ctx.beginPath();\n  ctx.lineWidth = SIZE;\n  ctx.moveTo(x, y);\n};\n\nconst ctxPathTo = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n  ctx.lineTo(x, y);\n  ctx.stroke();\n};\n\nconst resize = (canvas: HTMLCanvasElement) => {\n  const displayWidth = canvas.clientWidth;\n  const displayHeight = canvas.clientHeight;\n\n  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n};\n\nexport default CanvasDraw;\n","import component from 'components/CanvasDraw/index';\nexport default component;\n\nexport const frontmatter = {\n  title: 'Canvas Draw',\n  description: 'Pick a color, and draw on a canvas with your mouse or touch.',\n  categories: ['canvas', '2d', 'draw'],\n};\n"],"sourceRoot":""}