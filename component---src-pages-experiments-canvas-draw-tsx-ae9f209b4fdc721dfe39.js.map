{"version":3,"sources":["webpack:///./src/components/CanvasDraw/index.tsx","webpack:///./src/pages/experiments/canvas-draw.tsx"],"names":["frame","lastCoords","colors","ctxPathFrom","ctx","x","y","beginPath","lineWidth","moveTo","ctxPathTo","lineTo","stroke","resize","canvas","displayWidth","clientWidth","displayHeight","clientHeight","width","height","CanvasDraw","_useState","useState","doDraw","setDoDraw","_useState2","colorIndex","setColorIndex","ref","useRef","onMouseMove","useCallback","e","current","cancelAnimationFrame","rect","getBoundingClientRect","clientX","left","clientY","top","requestAnimationFrame","getContext","strokeStyle","onTrigger","hasTrigger","buttons","onPickColor","i","react_default","a","createElement","className","css","container","onMouseUp","onMouseDown","map","c","key","cls","color","style","backgroundColor","__webpack_require__","d","__webpack_exports__","frontmatter","component","title","description","categories"],"mappings":"yJAMIA,EAAuB,KACvBC,EAA8C,KAE5CC,EAAS,CACb,qBACA,qBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,UACA,UACA,OACA,QAyEIC,EAAc,SAACC,EAA+BC,EAAWC,GAC7DF,EAAIG,YACJH,EAAII,UA/FO,EAgGXJ,EAAIK,OAAOJ,EAAGC,IAGVI,EAAY,SAACN,EAA+BC,EAAWC,GAC3DF,EAAIO,OAAON,EAAGC,GACdF,EAAIQ,UAGAC,EAAS,SAACC,GACd,IAAMC,EAAeD,EAAOE,YACtBC,EAAgBH,EAAOI,aAEzBJ,EAAOK,QAAUJ,GAAgBD,EAAOM,SAAWH,IACrDH,EAAOK,MAAQJ,EACfD,EAAOM,OAASH,IAILI,EA3FI,WAAM,IAAAC,EACKC,oBAAS,GAA9BC,EADgBF,EAAA,GACRG,EADQH,EAAA,GAAAI,EAEaH,mBAAS,GAAtCI,EAFgBD,EAAA,GAEJE,EAFIF,EAAA,GAIjBG,EAAMC,iBAA0B,MAChCC,EAAcC,sBAClB,SAACC,GAEC,GADKT,IAAQvB,EAAa,MACrB4B,GAAQA,EAAIK,SAAYV,EAA7B,CACA,IAAMV,EAASe,EAAIK,QAEflC,GAAOmC,qBAAqBnC,GAEhC,IAAMoC,EAAOtB,EAAOuB,wBACdhC,EAAI4B,EAAEK,QAAUF,EAAKG,KACrBjC,EAAI2B,EAAEO,QAAUJ,EAAKK,IAE3BzC,EAAQ0C,sBAAsB,WAC5B,IAAMtC,EAAMU,EAAO6B,WAAW,MACzBvC,IACLS,EAAOC,GACPV,EAAIwC,YAAc1C,EAAOyB,GACzBxB,EAAYC,EAAKC,EAAGC,GACfL,GAKLS,EAAUN,EAAKH,EAAWI,EAAGJ,EAAWK,GACxCL,EAAa,CAAEI,IAAGC,MALhBL,EAAa,CAAEI,IAAGC,UAQxB,CAACuB,EAAKL,IAGFqB,EAAYb,sBAAY,SAACC,GAC7B,IAAMa,EAA2B,IAAdb,EAAEc,QACrBtB,EAAUqB,IACT,IAEGE,EAAchB,sBAClB,SAACiB,GAAD,OAAe,WACbrB,EAAcqB,KAEhB,IAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAIC,WAClBL,EAAAC,EAAAC,cAAA,UACEvB,IAAKA,EACLwB,UAAWC,IAAIxC,OACfiB,YAAaA,EACbyB,UAAWX,EACXY,YAAaZ,IAEfK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAI,kBACjBpD,EAAOwD,IAAI,SAACC,EAAWV,GAAZ,OACVC,EAAAC,EAAAC,cAAA,OACEQ,IAAKD,EACLN,UAAWQ,IAAIP,IAAIQ,MAAOb,IAAMtB,GAAc2B,IAAI,iBAClDE,UAAWR,EAAYC,GACvBc,MAAO,CAAEC,gBAAiBL,UC1FtCM,EAAAC,EAAAC,EAAA,gCAAAC,IACeC,gBAEFD,EAAc,CACzBE,MAAO,cACPC,YAAa,+DACbC,WAAY,CAAC,SAAU,KAAM","file":"component---src-pages-experiments-canvas-draw-tsx-ae9f209b4fdc721dfe39.js","sourcesContent":["import cls from 'classnames';\nimport React, { useCallback, useRef, useState } from 'react';\n\nimport css from './styles.module.scss';\n\nconst SIZE = 3;\nlet frame: number | null = null;\nlet lastCoords: null | { x: number; y: number } = null;\n\nconst colors = [\n  'hsl(205, 67%, 45%)',\n  'hsl(205, 74%, 65%)',\n  'hsl(29, 80%, 44%)',\n  'hsl(48, 95%, 76%)',\n  'hsl(209, 34%, 30%)',\n  'hsl(211, 27%, 70%)',\n  'hsl(185, 81%, 29%)',\n  'hsl(184, 65%, 59%)',\n  'hsl(360, 72%, 38%)',\n  'hsl(360, 77%, 78%)',\n  'hsl(166, 72%, 28%)',\n  'hsl(158, 58%, 62%)',\n  '#F0F0F0',\n  '#A4A4A4',\n  '#000',\n  '#fff',\n];\n\nconst CanvasDraw = () => {\n  const [doDraw, setDoDraw] = useState(false);\n  const [colorIndex, setColorIndex] = useState(0);\n\n  const ref = useRef<HTMLCanvasElement>(null);\n  const onMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (!doDraw) lastCoords = null;\n      if (!ref || !ref.current || !doDraw) return;\n      const canvas = ref.current;\n\n      if (frame) cancelAnimationFrame(frame);\n\n      const rect = canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      frame = requestAnimationFrame(() => {\n        const ctx = canvas.getContext('2d');\n        if (!ctx) return;\n        resize(canvas);\n        ctx.strokeStyle = colors[colorIndex];\n        ctxPathFrom(ctx, x, y);\n        if (!lastCoords) {\n          lastCoords = { x, y };\n          return;\n        }\n\n        ctxPathTo(ctx, lastCoords.x, lastCoords.y);\n        lastCoords = { x, y };\n      });\n    },\n    [ref, doDraw]\n  );\n\n  const onTrigger = useCallback((e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const hasTrigger = e.buttons === 1;\n    setDoDraw(hasTrigger);\n  }, []);\n\n  const onPickColor = useCallback(\n    (i: number) => () => {\n      setColorIndex(i);\n    },\n    []\n  );\n\n  return (\n    <div className={css.container}>\n      <canvas\n        ref={ref}\n        className={css.canvas}\n        onMouseMove={onMouseMove}\n        onMouseUp={onTrigger}\n        onMouseDown={onTrigger}\n      />\n      <div className={css['color-palette']}>\n        {colors.map((c: string, i) => (\n          <div\n            key={c}\n            className={cls(css.color, i === colorIndex && css['active-color'])}\n            onMouseUp={onPickColor(i)}\n            style={{ backgroundColor: c }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst ctxPathFrom = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n  ctx.beginPath();\n  ctx.lineWidth = SIZE;\n  ctx.moveTo(x, y);\n};\n\nconst ctxPathTo = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n  ctx.lineTo(x, y);\n  ctx.stroke();\n};\n\nconst resize = (canvas: HTMLCanvasElement) => {\n  const displayWidth = canvas.clientWidth;\n  const displayHeight = canvas.clientHeight;\n\n  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n};\n\nexport default CanvasDraw;\n","import component from 'components/CanvasDraw/index';\nexport default component;\n\nexport const frontmatter = {\n  title: 'Canvas Draw',\n  description: 'Pick a color, and draw on a canvas with your mouse or touch.',\n  categories: ['canvas', '2d', 'draw'],\n};\n"],"sourceRoot":""}