{"version":3,"sources":["webpack:///./src/hooks/use-previous.ts","webpack:///./src/components/FlipAnimationTechnique/index.tsx","webpack:///./src/components/FlipAnimationTechnique/hooks/use-animation.ts","webpack:///./src/components/FlipAnimationTechnique/hooks/use-child-aware-animation.ts","webpack:///./src/pages/experiments/flip-animation-technique.tsx"],"names":["usePrevious","value","ref","useRef","useEffect","current","before","height","width","left","after","FlipAnimationTechnique1","elementRef","_useState","useState","animated","setAnimated","toggleAnimation","useCallback","clientRect","setClientRect","prevAnimated","useLayoutEffect","el","first","last","getBoundingClientRect","deltaX","deltaY","top","deltaW","deltaH","animate","transformOrigin","transform","duration","easing","fill","useAnimation","react_default","a","createElement","className","css","container","onClick","style","cls","FlipAnimationTechnique2","_useState2","parentClientRect","setParentClientRect","childClientRect","setChildClientRect","parentEl","childEl","querySelector","parentFirst","parentLast","childFirst","childLast","parentDeltaX","parentDeltaY","parentDeltaW","parentDeltaH","childDeltaW","childDeltaH","useChildAwareAnimation","FlipAnimationTechniqueRouter","_ref","location","react_router","path","component","to","FlipAnimationTechniqueParent","_useState3","isLoaded","setIsLoaded","react_router_dom","navigation","activeClassName","active","Fragment","__webpack_require__","d","__webpack_exports__","frontmatter","title","description","categories"],"mappings":"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","file":"component---src-pages-experiments-flip-animation-technique-tsx-c9367aa22ed48449725c.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport const usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current || ({} as T);\n};\n","import cls from 'classnames';\nimport React, { CSSProperties, useCallback, useEffect, useRef, useState } from 'react';\nimport { HashRouter, NavLink, Redirect, Route, RouteProps, Switch } from 'react-router-dom';\n\nimport { useAnimation } from 'components/FlipAnimationTechnique/hooks/use-animation';\nimport { useChildAwareAnimation } from 'components/FlipAnimationTechnique/hooks/use-child-aware-animation';\nimport css from './styles.module.scss';\n\nconst before: CSSProperties = {\n  height: '100px',\n  width: '100px',\n  left: '200px',\n};\n\nconst after: CSSProperties = {\n  height: '200px',\n  width: '200px',\n  left: '-200px',\n};\n\nconst FlipAnimationTechnique1 = () => {\n  const elementRef = useRef(null as null | HTMLDivElement);\n  const [animated, setAnimated] = useState(false);\n  const toggleAnimation = useCallback(() => setAnimated(!animated), [animated]);\n  useAnimation(elementRef, animated);\n\n  return (\n    <div className={css.container} onClick={toggleAnimation}>\n      <h2>Without child transitions handling</h2>\n      <div className={css['element-wrapper']}>\n        <div ref={elementRef} className={css['element-common-styles']} style={animated ? before : after}>\n          FLIP\n        </div>\n      </div>\n      <div className={css['element-wrapper']}>\n        <div className={cls(css['element-common-styles'], css['non-flip'])} style={animated ? before : after}>\n          Non-FLIP\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst FlipAnimationTechnique2 = () => {\n  const elementRef = useRef(null as null | HTMLDivElement);\n  const [animated, setAnimated] = useState(false);\n  const toggleAnimation = useCallback(() => setAnimated(!animated), [animated]);\n  useChildAwareAnimation(elementRef, animated);\n\n  return (\n    <div className={css.container} onClick={toggleAnimation}>\n      <h2>With child transitions handling</h2>\n      <div className={css['element-wrapper']}>\n        <div ref={elementRef} className={css['element-common-styles']} style={animated ? before : after}>\n          <div>FLIP</div>\n        </div>\n      </div>\n      <div className={css['element-wrapper']}>\n        <div className={cls(css['element-common-styles'], css['non-flip'])} style={animated ? before : after}>\n          <div>Non-FLIP</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst FlipAnimationTechniqueRouter = ({ location }: RouteProps) => {\n  return (\n    <Switch location={location}>\n      <Route path={'/route-1'} component={FlipAnimationTechnique1} />\n      <Route path={'/route-2'} component={FlipAnimationTechnique2} />\n\n      <Redirect to={'/route-1'} />\n    </Switch>\n  );\n};\n\nconst FlipAnimationTechniqueParent = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n\n  if (!isLoaded) return <></>;\n  return (\n    <HashRouter>\n      <div className={css.container}>\n        <div className={css.navigation}>\n          <NavLink to={'/route-1'} activeClassName={css.active}>\n            FLIP w/o Children\n          </NavLink>\n          <NavLink to={'/route-2'} activeClassName={css.active}>\n            FLIP w/ Children\n          </NavLink>\n        </div>\n        <h2>Click to toggle animation state</h2>\n        <Route path={'/'} component={FlipAnimationTechniqueRouter} />\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default FlipAnimationTechniqueParent;\n","import { usePrevious } from 'hooks/use-previous';\nimport { MutableRefObject, useLayoutEffect, useState } from 'react';\n\nexport const useAnimation = (elementRef: MutableRefObject<null | HTMLDivElement>, animated: boolean) => {\n  const [clientRect, setClientRect] = useState(null as null | ClientRect);\n  const { animated: prevAnimated } = usePrevious({ animated });\n\n  useLayoutEffect(() => {\n    if (animated === prevAnimated) return;\n    if (!elementRef || !elementRef.current) return;\n\n    const el = elementRef.current;\n    const first = clientRect;\n    const last = el.getBoundingClientRect();\n\n    setClientRect(el.getBoundingClientRect());\n\n    if (!first || !last) return;\n\n    const deltaX = first.left - last.left;\n    const deltaY = first.top - last.top;\n    const deltaW = first.width / last.width;\n    const deltaH = first.height / last.height;\n\n    el.animate(\n      [\n        {\n          transformOrigin: 'top left',\n          transform: `translate(${deltaX}px, ${deltaY}px) scale(${deltaW}, ${deltaH})`,\n        },\n        {\n          transformOrigin: 'top left',\n          transform: 'none',\n        },\n      ],\n      {\n        duration: 300,\n        easing: 'ease-in-out',\n        fill: 'both',\n      }\n    );\n  }, [elementRef, animated, prevAnimated, clientRect]);\n};\n","import { usePrevious } from 'hooks/use-previous';\nimport { MutableRefObject, useLayoutEffect, useState } from 'react';\n\n// This isn't very reusable for different kinds of layouts, but easily tweakable nonetheless.\n// This is an experiment anyway.\nexport const useChildAwareAnimation = (elementRef: MutableRefObject<null | HTMLDivElement>, animated: boolean) => {\n  const [parentClientRect, setParentClientRect] = useState(null as null | ClientRect);\n  const [childClientRect, setChildClientRect] = useState(null as null | ClientRect);\n  const { animated: prevAnimated } = usePrevious({ animated });\n\n  useLayoutEffect(() => {\n    if (animated === prevAnimated) return;\n    if (!elementRef || !elementRef.current) return;\n\n    const parentEl = elementRef.current;\n    const childEl = elementRef.current.querySelector('div');\n    if (!childEl) return;\n\n    const parentFirst = parentClientRect;\n    const parentLast = parentEl.getBoundingClientRect();\n\n    const childFirst = childClientRect;\n    const childLast = childEl.getBoundingClientRect();\n\n    setParentClientRect(parentEl.getBoundingClientRect());\n    setChildClientRect(childEl.getBoundingClientRect());\n\n    if (!parentFirst || !parentLast) return;\n    if (!childFirst || !childLast) return;\n\n    const parentDeltaX = parentFirst.left - parentLast.left;\n    const parentDeltaY = parentFirst.top - parentLast.top;\n    const parentDeltaW = parentFirst.width / parentLast.width;\n    const parentDeltaH = parentFirst.height / parentLast.height;\n\n    const childDeltaW = parentLast.width / parentFirst.width;\n    const childDeltaH = parentLast.height / parentFirst.height;\n\n    parentEl.animate(\n      [\n        {\n          transformOrigin: 'top left',\n          transform: `translate(${parentDeltaX}px, ${parentDeltaY}px) scale(${parentDeltaW}, ${parentDeltaH})`,\n        },\n        {\n          transformOrigin: 'top left',\n          transform: 'none',\n        },\n      ],\n      {\n        duration: 300,\n        easing: 'ease-in-out',\n        fill: 'both',\n      }\n    );\n\n    childEl.animate(\n      [\n        {\n          transformOrigin: 'center',\n          transform: `scale(${childDeltaW}, ${childDeltaH})`,\n        },\n        {\n          transformOrigin: 'center',\n          transform: 'none',\n        },\n      ],\n      {\n        duration: 300,\n        easing: 'ease-in-out',\n        fill: 'both',\n      }\n    );\n  }, [elementRef, animated, prevAnimated, parentClientRect, childClientRect]);\n};\n","import component from 'components/FlipAnimationTechnique/index';\nexport default component;\n\nexport const frontmatter = {\n  title: 'FLIP Animation Technique',\n  description: 'An example with first-last-invert-play animation technique',\n  categories: ['css', 'animations', 'flip', 'transitions', 'transform'],\n};\n"],"sourceRoot":""}